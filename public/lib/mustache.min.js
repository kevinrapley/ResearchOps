/* Minimal Mustache (ESM) â€” supports: variables, triple-stache, sections (#/), inverted (^), partials (>), comments (!), dotted paths, array index */
const ESC = s => String(s)
	.replace(/&/g, "&amp;")
	.replace(/</g, "&lt;")
	.replace(/>/g, "&gt;")
	.replace(/"/g, "&quot;")
	.replace(/'/g, "&#39;");

function get(ctx, path) {
	if (path === "." || path === "./") return ctx["."] ?? ctx;
	const parts = path.split(".");
	let cur = ctx;
	for (const p of parts) {
		if (cur == null) return undefined;
		cur = (typeof cur === "function") ? cur.call(ctx) : cur[p];
	}
	return (typeof cur === "function") ? cur.call(ctx) : cur;
}

function merge(a, b) { return Object.assign(Object.create(a || null), b || {}); }

function renderTokens(tpl, ctx, partials) {
	// Partials first: {{> name}}
	tpl = tpl.replace(/{{>\s*([a-zA-Z0-9._\-]+)\s*}}/g, (_, name) => {
		const p = partials && partials[name];
		return p ? renderTokens(String(p), ctx, partials) : "";
	});
	// Comments: {{! ... }}
	tpl = tpl.replace(/{{!\s*[^}]*}}/g, "");
	// Sections (truthy / arrays)
	tpl = tpl.replace(/{{\s*#\s*([a-zA-Z0-9._\-]+)\s*}}([\s\S]*?){{\s*\/\s*\1\s*}}/g, (_, key, inner) => {
		const val = get(ctx, key);
		if (Array.isArray(val)) {
			return val.map((item, i) => {
				const child = merge(ctx, { ".": item, index: i + 1 });
				// If array item is object, expose its keys; else expose as "."
				return (item && typeof item === "object") ?
					renderTokens(inner, merge(child, item), partials) :
					renderTokens(inner, child, partials);
			}).join("");
		}
		if (val && typeof val === "object") {
			return renderTokens(inner, merge(ctx, val), partials);
		}
		return val ? renderTokens(inner, ctx, partials) : "";
	});
	// Inverted sections
	tpl = tpl.replace(/{{\s*\^\s*([a-zA-Z0-9._\-]+)\s*}}([\s\S]*?){{\s*\/\s*\1\s*}}/g, (_, key, inner) => {
		const val = get(ctx, key);
		const empty = !val || (Array.isArray(val) && val.length === 0);
		return empty ? renderTokens(inner, ctx, partials) : "";
	});
	// Triple-stache: {{{ path }}}
	tpl = tpl.replace(/{{{\s*([a-zA-Z0-9._\-]+)\s*}}}/g, (_, key) => {
		const v = get(ctx, key);
		return v == null ? "" : String(v);
	});
	// Vars: {{ path }}
	tpl = tpl.replace(/{{\s*([a-zA-Z0-9._\-]+)\s*}}/g, (_, key) => {
		const v = get(ctx, key);
		return v == null ? "" : ESC(v);
	});
	return tpl;
}

const Mustache = {
	render(source, context = {}, partials = {}) {
		return renderTokens(String(source), context, partials);
	}
};
export default Mustache;